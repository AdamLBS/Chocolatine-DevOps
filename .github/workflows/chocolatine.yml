name: Chocolatine
env:
  MIRROR_URL : git@github.com:EpitechPromo2026/B-DOP-200-MAR-2-1-chocolatine-adam.elaoumari.git
  EXECUTABLES : push_swap
on:
  push:
    branches-ignore:
      - 'ga-ignore**'
  pull_request:
    branches-ignore:
      - 'ga-ignore**'

jobs:
    check_repository_cleanliness :
     runs-on: ubuntu-latest
     steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - name: Check for unwanted files
          run: |
             VAL=false
             xargs -d $'\n' sh -c 'for arg do command1 "$arg"; command2 "$arg"; ...; done' _
             find * | grep -w --line-buffered ".*\.o$" | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             find * | grep -w --line-buffered ".*\.a$" | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             find * | grep -w --line-buffered ".*\.so$" | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             find * | grep -w --line-buffered ".*\.gcno$" | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             find * | grep -w --line-buffered ".*\.gcda$" | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             find * | grep -w --line-buffered ".*\.gcov$" | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             find * | grep -w --line-buffered ".*\~$" | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             find * | grep -w --line-buffered "^#.*|*.#\$" | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             find * | grep -i --line-buffered "pain_au_chocolat"  | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             find * | grep -i -w --line-buffered "tmp"  | xargs -I % sh -c 'echo ::error file=%,line=1,col=1,title=Unwanted file detected::%; echo action_state=true >> $GITHUB_ENV;'
             echo "$VAL"
             if [ "$VAL" = "false" ]; then exit 0; fi
             if [ "$VAL" = "true" ]; then exit 1; fi
        - name: Exit if needed
          if: ${{ env.action_state == 'true' }}
          run:
            exit 1
          continue-on-error: false

    check_program_compilation :
      runs-on: ubuntu-latest
      needs: [check_repository_cleanliness]
      container:
        image: epitechcontent/epitest-docker
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - name: Make
          env:
            TEMP: false
          run : make
          timeout-minutes: 2
        - name: make clean
          run: make clean
        - name: check files
          run: |
            if [[ "${{ env.EXECUTABLES }}" =~ "," ]]; then TEST=`echo "${{ env.EXECUTABLES }} && find . -type f -executable | grep $TEST" | tr ',' ' '`; else find . -type f -executable | grep ${{ env.EXECUTABLES }}; fi;

    run_tests :
      needs: [check_repository_cleanliness, check_program_compilation]
      runs-on: ubuntu-latest
      container:
        image: epitechcontent/epitest-docker
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - name: run tests
          run: make tests_run
          timeout-minutes: 2

    push_to_mirror:
      needs: [check_repository_cleanliness, check_program_compilation, run_tests]
      runs-on: ubuntu-latest
      if: github.event_name == 'push'
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - uses: pixta-dev/repository-mirroring-action@v1
          with:
            target_repo_url:
              ${{env.MIRROR_URL}}
            ssh_private_key:
              ${{ secrets.SSH_KEY }}